const mongoose = require('mongoose');
require('dotenv').config();

async function finalComprehensiveTest() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/portal-web');
    const db = mongoose.connection.db;

    console.log('üèÅ PRUEBA FINAL COMPLETA DEL SISTEMA DE PAGOS');
    console.log('='.repeat(60));

    const testUserId = '68b8f47d1362234bec2e8991';

    // PASO 1: Crear boleta completamente nueva
    console.log('\nüìÑ PASO 1: Creando nueva boleta pendiente...');

    const nuevaBoleta = {
      numeroBoleta: `FINAL_TEST_${Date.now()}`,
      socioId: new mongoose.Types.ObjectId(testUserId),
      fechaEmision: new Date(),
      fechaVencimiento: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
      consumoM3: 30,
      montoTotal: 100000,
      estado: 'pendiente',
      detalle: {
        consumoAnterior: 400,
        consumoActual: 430,
        tarifaM3: 2500,
        cargoFijo: 25000,
        otrosCargos: 0,
        descuentos: 0
      },
      lecturaAnterior: 400,
      lecturaActual: 430,
      periodo: '2025-11',
      createdAt: new Date(),
      updatedAt: new Date()
    };

    const boletaResult = await db.collection('boletas').insertOne(nuevaBoleta);
    console.log(`‚úÖ Boleta creada: ${nuevaBoleta.numeroBoleta} (ID: ${boletaResult.insertedId})`);
    console.log(`   Estado inicial: ${nuevaBoleta.estado}`);
    console.log(`   Monto: $${nuevaBoleta.montoTotal}`);

    // PASO 2: Crear pago asociado (simulando creaci√≥n por PayPal/MercadoPago)
    console.log('\nüí≥ PASO 2: Creando pago asociado...');

    const nuevoPago = {
      boletaId: boletaResult.insertedId,
      socioId: new mongoose.Types.ObjectId(testUserId),
      monto: nuevaBoleta.montoTotal,
      fechaPago: new Date(),
      metodoPago: 'paypal',
      estadoPago: 'pendiente',
      transactionId: `final-test-${Date.now()}`,
      metadata: {
        paypalPaymentId: `PAY-FINAL-TEST-${Date.now()}`,
        externalReference: `final-ref-${Date.now()}`,
        boletaNumero: nuevaBoleta.numeroBoleta,
        userId: testUserId,
        finalTest: true
      },
      createdAt: new Date(),
      updatedAt: new Date()
    };

    const pagoResult = await db.collection('pagos').insertOne(nuevoPago);
    console.log(`‚úÖ Pago creado: ${pagoResult.insertedId}`);
    console.log(`   Estado inicial: ${nuevoPago.estadoPago}`);
    console.log(`   TransactionId: ${nuevoPago.transactionId}`);

    // PASO 3: Simular webhook de PayPal que marca el pago como completado
    console.log('\nüéØ PASO 3: Simulando webhook de PayPal (updateMany)...');

    const updateResult = await db.collection('pagos').updateMany(
      { _id: pagoResult.insertedId },
      {
        $set: {
          estadoPago: 'completado',
          'metadata.paypalExecuteResult': { state: 'approved' },
          'metadata.paypalState': 'approved',
          'metadata.webhookReceived': new Date(),
          fechaPago: new Date(),
          updatedAt: new Date()
        }
      }
    );

    console.log(`‚úÖ UpdateMany ejecutado: ${updateResult.modifiedCount} pago(s) actualizado(s)`);

    // PASO 4: Verificar si el sistema autom√°ticamente actualiz√≥ la boleta
    console.log('\nüîç PASO 4: Verificando actualizaci√≥n autom√°tica de boleta...');

    const boletaVerificacion = await db.collection('boletas').findOne({ _id: boletaResult.insertedId });
    const pagoVerificacion = await db.collection('pagos').findOne({ _id: pagoResult.insertedId });

    console.log(`üìä Estado del pago: ${pagoVerificacion.estadoPago}`);
    console.log(`üìÑ Estado de la boleta: ${boletaVerificacion.estado}`);

    let sistemaFunciona = false;

    if (pagoVerificacion.estadoPago === 'completado' && boletaVerificacion.estado === 'pagada') {
      console.log(`üü¢ ¬°PERFECTO! El sistema funciona autom√°ticamente`);
      console.log(`   - Pago completado ‚úÖ`);
      console.log(`   - Boleta autom√°ticamente actualizada a pagada ‚úÖ`);
      sistemaFunciona = true;
    } else if (pagoVerificacion.estadoPago === 'completado' && boletaVerificacion.estado === 'pendiente') {
      console.log(`üî¥ PROBLEMA CONFIRMADO: Pago completado pero boleta no actualizada`);
      console.log(`   - Pago: completado ‚úÖ`);
      console.log(`   - Boleta: pendiente ‚ùå`);
      console.log(`   - Esto confirma que updateMany() no activa el middleware`);
      sistemaFunciona = false;
    } else {
      console.log(`‚ö†Ô∏è  Estado inesperado:`);
      console.log(`   - Pago: ${pagoVerificacion.estadoPago}`);
      console.log(`   - Boleta: ${boletaVerificacion.estado}`);
    }

    // PASO 5: Si no funciona autom√°ticamente, probar correcci√≥n manual
    if (!sistemaFunciona) {
      console.log('\nüîß PASO 5: Aplicando correcci√≥n manual...');

      // Simular lo que deber√≠a hacer updateBoletaStatus()
      await db.collection('boletas').updateOne(
        { _id: boletaResult.insertedId },
        { $set: { estado: 'pagada', updatedAt: new Date() } }
      );

      await db.collection('users').updateOne(
        { _id: new mongoose.Types.ObjectId(testUserId) },
        { $inc: { deudaTotal: -nuevoPago.monto } }
      );

      console.log(`‚úÖ Correcci√≥n manual aplicada`);

      // Verificar resultado de la correcci√≥n
      const boletaCorregida = await db.collection('boletas').findOne({ _id: boletaResult.insertedId });
      console.log(`üìÑ Estado de boleta despu√©s de correcci√≥n: ${boletaCorregida.estado}`);

      if (boletaCorregida.estado === 'pagada') {
        console.log(`üü¢ CORRECCI√ìN EXITOSA: El m√©todo manual funciona`);
      } else {
        console.log(`üî¥ ERROR: Incluso la correcci√≥n manual fall√≥`);
      }
    }

    // PASO 6: Verificar estado del usuario
    console.log('\nüë§ PASO 6: Verificando impacto en deuda del usuario...');
    const usuarioFinal = await db.collection('users').findOne({ _id: new mongoose.Types.ObjectId(testUserId) });
    console.log(`üí∞ Deuda total del usuario: $${usuarioFinal?.deudaTotal || 0}`);

    // PASO 7: Resumen y diagn√≥stico final
    console.log('\nüìã DIAGN√ìSTICO FINAL:');

    if (sistemaFunciona) {
      console.log(`üü¢ ESTADO: Sistema funcionando correctamente`);
      console.log(`   ‚úÖ Los pagos se sincronizan autom√°ticamente con las boletas`);
      console.log(`   ‚úÖ No se requiere acci√≥n adicional`);
      console.log(`   üí° Si reportas problemas, pueden ser casos espec√≠ficos o timing`);
    } else {
      console.log(`üî¥ ESTADO: Sistema requiere correcci√≥n`);
      console.log(`   ‚ùå updateMany() no activa la actualizaci√≥n autom√°tica de boletas`);
      console.log(`   ‚úÖ La correcci√≥n manual funciona`);
      console.log(`   üîß RECOMENDACI√ìN: Implementar llamadas expl√≠citas a updateBoletaStatus()`);
      console.log(`   üîß O modificar los controladores para usar save() en lugar de updateMany()`);
    }

    // PASO 8: Limpieza
    console.log('\nüßπ PASO 8: Limpiando datos de prueba...');
    await db.collection('boletas').deleteOne({ _id: boletaResult.insertedId });
    await db.collection('pagos').deleteOne({ _id: pagoResult.insertedId });
    console.log(`‚úÖ Datos de prueba eliminados`);

    console.log('\nüèÅ PRUEBA FINAL COMPLETADA');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error en prueba final:', error);
    process.exit(1);
  }
}

finalComprehensiveTest();