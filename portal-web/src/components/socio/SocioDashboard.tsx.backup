import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import NotificationBell from '@/components/shared/NotificationBell';
import {
  Receipt,
  CreditCard,
  History,
  AlertCircle,
  CheckCircle,
  DollarSign,
  FileText,
  LogOut,
  MessageCircle,
  Home,
  User,
  Settings,
  Clock,
  BookOpen,
  TestTube,
  ArrowLeft,
  Menu,
  Droplets,
  Bot,
  UserCheck,
  Shield
} from 'lucide-react';
import {
  Sidebar,
  SidebarProvider,
  SidebarTrigger,
  SidebarContent,
  SidebarHeader,
  SidebarFooter,
  SidebarInset,
  SidebarMenu,
  SidebarMenuItem,
  SidebarMenuButton,
  SidebarSeparator
} from '@/components/ui/sidebar';

// Importar los componentes que se cargar√°n din√°micamente
import BoletasView from './BoletasView';
import ChatSocioView from './ChatSocioView';
import PerfilSocioView from './PerfilSocioView';
import SocioPagoView from './SocioPagoView';
import HistorialPagosView from './HistorialPagosView';
import TutorialSocio from './TutorialSocio';
import SidebarTutorial, { useSidebarTutorial } from './SidebarTutorial';
import AIAssistantModal from '../modals/AIAssistantModal';
import { ConsumptionBilling } from '@/components/smart-meters/ConsumptionBilling';
import { useBoletas } from '@/hooks/useBoletas';
import { usePagos } from '@/hooks/usePagos';
import { toast } from 'sonner';

import type { Socio } from '@/types';

type SocioView = 'dashboard' | 'boletas' | 'pago' | 'historial' | 'chat' | 'perfil' | 'consumo';

interface SocioDashboardProps {
  socio: Socio;
  onLogout: () => void;
  initialConversationId?: string; // ID de conversaci√≥n para abrir directamente
}

export default function SocioDashboard({ socio, onLogout, initialConversationId }: SocioDashboardProps) {
  const [currentView, setCurrentView] = useState<SocioView>('dashboard');
  const [isTutorialOpen, setIsTutorialOpen] = useState(false);
  const [selectedBoletaIds, setSelectedBoletaIds] = useState<string[]>([]);
  const [isAssistantModalOpen, setIsAssistantModalOpen] = useState(false);
  const [hasOpenedInitialConversation, setHasOpenedInitialConversation] = useState(false);

  // Use real data hooks
  const { boletas, pendingBoletas, totalDeuda, updateBoletaStatusInDB, refetch, queryClient } = useBoletas();

  // useEffect para manejar el initialConversationId - solo una vez
  useEffect(() => {
    if (initialConversationId && !hasOpenedInitialConversation) {
      setIsAssistantModalOpen(true);
      setHasOpenedInitialConversation(true);
    }
  }, [initialConversationId, hasOpenedInitialConversation]);
  



  
  const formatCurrency = (amount: number) => 
    new Intl.NumberFormat('es-CL', { style: 'currency', currency: 'CLP' }).format(amount);

  const getDeudaStatus = () => {
    if (totalDeuda === 0) return { color: 'bg-green-600', text: 'Sin deuda' };
    if (totalDeuda > 50000) return { color: 'bg-destructive', text: 'Cr√≠tica' };
    return { color: 'bg-yellow-600', text: 'Pendiente' };
  };

  const getProximoVencimiento = () => {
    try {
      // Safe checks
      if (!boletas || !Array.isArray(boletas) || boletas.length === 0) {
        return {
          texto: 'Sin boletas pendientes',
          dias: 0,
          vencido: false,
          color: 'text-gray-500'
        };
      }

      // Encontrar boletas pendientes de forma segura
      const boletasPendientes = boletas.filter((boleta: any) => {
        try {
          return boleta &&
                 typeof boleta === 'object' &&
                 boleta.estado === 'pendiente' &&
                 boleta.fechaVencimiento;
        } catch (e) {
          return false;
        }
      });

      if (boletasPendientes.length === 0) {
        return {
          texto: 'Todas las boletas pagadas',
          dias: 0,
          vencido: false,
          color: 'text-green-600 dark:text-green-400'
        };
      }

      // Encontrar la fecha m√°s pr√≥xima de forma segura
      let proximaFecha = null;
      let menorTiempo = Infinity;

      for (const boleta of boletasPendientes) {
        try {
          const fecha = new Date(boleta.fechaVencimiento);
          if (!isNaN(fecha.getTime()) && fecha.getTime() < menorTiempo) {
            menorTiempo = fecha.getTime();
            proximaFecha = fecha;
          }
        } catch (e) {
          continue;
        }
      }

      if (!proximaFecha) {
        return {
          texto: 'Sin fechas v√°lidas',
          dias: 0,
          vencido: false,
          color: 'text-gray-500'
        };
      }

      const hoy = new Date();
      const diferenciaDias = Math.ceil((proximaFecha.getTime() - hoy.getTime()) / (1000 * 60 * 60 * 24));

      if (diferenciaDias < 0) {
        return {
          texto: `Vencido hace ${Math.abs(diferenciaDias)} d√≠as`,
          dias: diferenciaDias,
          vencido: true,
          color: 'text-red-600'
        };
      } else if (diferenciaDias === 0) {
        return {
          texto: 'Vence hoy',
          dias: diferenciaDias,
          vencido: true,
          color: 'text-red-600'
        };
      } else if (diferenciaDias <= 7) {
        return {
          texto: `Vence en ${diferenciaDias} d√≠as`,
          dias: diferenciaDias,
          vencido: false,
          color: 'text-orange-600'
        };
      } else {
        return {
          texto: `Vence en ${diferenciaDias} d√≠as`,
          dias: diferenciaDias,
          vencido: false,
          color: 'text-blue-600'
        };
      }
    } catch (error) {
      console.error('Error calculando pr√≥ximo vencimiento:', error);
      return {
        texto: 'Calculando...',
        dias: 0,
        vencido: false,
        color: 'text-gray-500'
      };
    }
  };

  const deudaStatus = getDeudaStatus();
  const proximoVencimiento = getProximoVencimiento();

  const getViewTitle = () => {
    switch (currentView) {
      case 'dashboard': return 'Dashboard';
      case 'boletas': return 'Mis Boletas';
      case 'pago': return 'Realizar Pago';
      case 'historial': return 'Historial de Pagos';
      case 'chat': return 'Chat de Soporte';
      case 'perfil': return 'Mi Perfil';
      case 'configuracion': return 'Configuraci√≥n';
      case 'consumo': return 'Mi Consumo';
      default: return 'Dashboard';
    }
  };

  const sidebarItems = [
    {
      id: 'dashboard' as SocioView,
      title: 'Dashboard',
      icon: Home,
      onClick: () => setCurrentView('dashboard')
    },
    {
      id: 'boletas' as SocioView,
      title: 'Mis Boletas',
      icon: FileText,
      onClick: () => setCurrentView('boletas')
    },
    {
      id: 'consumo' as SocioView,
      title: 'Mi Consumo',
      icon: Droplets,
      onClick: () => setCurrentView('consumo')
    },
    {
      id: 'historial' as SocioView,
      title: 'Historial',
      icon: History,
      onClick: () => setCurrentView('historial')
    },
    {
      id: 'pago' as SocioView,
      title: 'Realizar Pago',
      icon: CreditCard,
      onClick: () => setCurrentView('pago'),
      disabled: totalDeuda === 0
    },
    {
      id: 'chat' as SocioView,
      title: 'Chat Soporte',
      icon: MessageCircle,
      onClick: () => setCurrentView('chat')
    },
    {
      id: 'chatbot' as const,
      title: 'Asistente Virtual',
      icon: Bot,
      onClick: () => setIsAssistantModalOpen(true)
    }
  ];

  const getCurrentLocationText = () => {
    switch (currentView) {
      case 'perfil': return 'Mi Perfil';
      case 'boletas': return 'Mis Boletas';
      case 'pago': return 'Realizar Pago';
      case 'chat': return 'Chat de Soporte';
      case 'historial': return 'Historial de Pagos';
      case 'consumo': return 'Mi Consumo';
      default: return 'Dashboard Principal';
    }
  };

  const handleCloseTutorial = () => {
    setIsTutorialOpen(false);
  };

  const { startSidebarTutorial } = useSidebarTutorial();

  const handleProceedToPay = (boletaIds: string[]) => {
    setSelectedBoletaIds(boletaIds);
    setCurrentView('pago');
  };

  const renderContent = () => {
    switch (currentView) {
      case 'boletas':
        return (
          <BoletasView
            boletas={boletas}
            onBack={() => setCurrentView('dashboard')}
            onPagar={handleProceedToPay}
            onDownloadPDF={(boletaId: string) => {
              console.log('Download PDF for boleta:', boletaId);
            }}
            onViewDetalle={(boletaId: string) => {
              console.log('View detalle for boleta:', boletaId);
            }}
          />
        );
      case 'pago':
        return (
          <SocioPagoView
            socio={socio}
            selectedBoletaIds={selectedBoletaIds}
            onBack={() => setCurrentView('dashboard')}
            onPaymentComplete={(paymentData) => {
              console.log('Payment completed:', paymentData);

              // Recargar la p√°gina completamente para asegurar la actualizaci√≥n
              console.log('üí≥ Payment successful, reloading page...');

              // Mostrar mensaje de √©xito
              toast.success('¬°Pago exitoso! Actualizando datos...', {
                duration: 2000
              });

              // Recargar la p√°gina despu√©s de un breve delay
              setTimeout(() => {
                window.location.reload();
              }, 1500);
            }}
          />
        );
      case 'chat':
        return (
          <ChatSocioView
            onBack={() => setCurrentView('dashboard')}
          />
        );
      case 'perfil':
        return (
          <PerfilSocioView
            socio={socio}
            onBack={() => setCurrentView('dashboard')}
          />
        );
      case 'historial':
        return (
          <HistorialPagosView socio={socio} onBack={() => setCurrentView('dashboard')} />
        );
      case 'consumo':
        return (
          <ConsumptionBilling onBack={() => setCurrentView('dashboard')} />
        );
      default:
        return renderDashboardContent();
    }
  };

  const renderDashboardContent = () => (
    <DashboardContent
      socio={socio}
      formatCurrency={formatCurrency}
      deudaStatus={deudaStatus}
      setCurrentView={setCurrentView}
      totalDeuda={totalDeuda}
      pendingBoletas={pendingBoletas}
      handleProceedToPay={handleProceedToPay}
      proximoVencimiento={proximoVencimiento}
      boletas={boletas}
    />
  );

  return (
    <SidebarProvider>
      <div className="min-h-screen flex w-full bg-background">
        <Sidebar className="border-r border-slate-200">
          <SidebarHeader className="border-b border-slate-200 bg-gradient-to-br from-blue-50 via-white to-slate-50 px-6 py-5">
            <div className="flex items-center gap-4">
              <div className="relative">
                <div className="w-12 h-12 bg-gradient-to-br from-blue-600 via-blue-700 to-blue-800 rounded-2xl flex items-center justify-center shadow-lg">
                  <Droplets className="w-6 h-6 text-white" />
                </div>
                <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white rounded-full animate-pulse"></div>
              </div>
              <div>
                <h1 className="font-bold text-xl text-foreground mb-1">Portal APR</h1>
                <p className="text-sm font-medium text-muted-foreground">Centro de Socios</p>
                <p className="text-xs text-blue-600 font-semibold">Gesti√≥n Personal</p>
              </div>
            </div>
          </SidebarHeader>

          <SidebarContent className="px-4 py-6 bg-gradient-to-b from-slate-50/50 to-white">
            {/* Compact Socio Profile Card */}
            <div
              className="relative mb-4 p-3 bg-gradient-to-br from-white via-blue-50/30 to-slate-50 rounded-2xl shadow-sm border border-slate-200/60 cursor-pointer hover:shadow-md hover:border-blue-200/60 transition-all duration-300 group"
              onClick={() => setCurrentView('perfil')}
              id="socio-profile"
            >
              <div className="absolute top-0 right-0 p-2">
                <div className="w-1.5 h-1.5 bg-green-500 rounded-full animate-pulse"></div>
              </div>

              <div className="flex items-center gap-3 mb-3">
                <div className="relative">
                  <div className="w-10 h-10 bg-gradient-to-br from-blue-600 via-blue-700 to-purple-600 rounded-xl flex items-center justify-center shadow-md">
                    <UserCheck className="w-5 h-5 text-white" />
                  </div>
                  <div className="absolute -bottom-0.5 -right-0.5 w-3 h-3 bg-green-500 border-2 border-white rounded-full"></div>
                </div>

                <div className="flex-1 min-w-0">
                  <h3 className="font-bold text-foreground text-sm truncate">{socio.nombres}</h3>
                  <Badge className="text-xs bg-gradient-to-r from-blue-500 to-purple-500 text-white border-none shadow-sm mt-1">
                    Socio
                  </Badge>
                </div>
              </div>

              {/* Compact Account Status */}
              <div className="grid grid-cols-2 gap-2">
                <div className="bg-background/60 rounded-xl p-2">
                  <div className="text-xs text-muted-foreground mb-1">Deuda</div>
                  <div className={`text-sm font-bold ${totalDeuda === 0 ? 'text-green-700' : 'text-red-700'}`}>
                    {formatCurrency(totalDeuda)}
                  </div>
                </div>

                <div className="bg-background/60 rounded-xl p-2">
                  <div className="text-xs text-muted-foreground mb-1">Estado</div>
                  <div className={`text-sm font-bold ${totalDeuda === 0 ? 'text-green-700' : 'text-red-700'}`}>
                    {totalDeuda === 0 ? 'Al d√≠a' : 'Pendiente'}
                  </div>
                </div>
              </div>
            </div>

            {/* Professional Navigation Menu */}
            <div className="mb-4">
              <h4 className="text-xs font-bold text-slate-500 uppercase tracking-wider mb-3 px-3">Panel Principal</h4>
              <SidebarMenu className="space-y-2">
                {sidebarItems.map((item) => {
                  const isActive = item.id === currentView || (item.id === 'chatbot' && isAssistantModalOpen);
                  return (
                  <SidebarMenuItem key={item.id}>
                    <SidebarMenuButton
                      onClick={item.onClick}
                      disabled={item.disabled}
                      className={`
                        w-full h-12 rounded-2xl transition-all duration-200 group relative
                        ${isActive
                          ? '!bg-gradient-to-r !from-blue-600 !to-blue-700 !text-white shadow-lg !border-0'
                          : 'hover:!bg-gradient-to-r hover:!from-blue-700 hover:!to-blue-800 hover:!text-white hover:shadow-xl border border-transparent bg-transparent'
                        }
                        ${item.disabled ? 'opacity-40 cursor-not-allowed' : 'cursor-pointer'}
                      `}
                      style={isActive ? {
                        background: 'linear-gradient(to right, rgb(37, 99, 235), rgb(29, 78, 216))',
                        color: 'white'
                      } : {}}
                      id={`nav-${item.id}`}
                    >
                      <div className={`p-2 rounded-xl ${
                        isActive
                          ? 'bg-white/20'
                          : 'bg-slate-100 group-hover:bg-white/20 group-hover:shadow-sm'
                      } transition-all duration-200`}>
                        <item.icon className={`w-4 h-4 ${
                          isActive ? 'text-white' : 'text-slate-600 group-hover:text-white'
                        }`} />
                      </div>
                      <span className={`font-semibold ${
                        isActive ? 'text-white' : 'text-slate-700 group-hover:text-white'
                      }`}>{item.title}</span>

                      {item.id === 'pago' && totalDeuda > 0 && (
                        <div className="ml-auto">
                          <Badge
                            variant="destructive"
                            className={`text-xs font-bold ${
                              item.id === currentView
                                ? 'bg-white/20 text-white border-white/30'
                                : 'bg-red-100 text-red-700 border-red-200'
                            }`}
                          >
                            !
                          </Badge>
                        </div>
                      )}

                      {item.id === currentView && (
                        <div className="absolute right-0 top-1/2 transform -translate-y-1/2 w-1 h-6 bg-white rounded-l-full"></div>
                      )}
                    </SidebarMenuButton>
                  </SidebarMenuItem>
                  );
                })}
              </SidebarMenu>
            </div>
          </SidebarContent>

          <SidebarFooter className="p-2">
            {/* Minimal footer space with logout */}
            <SidebarMenu>
              <SidebarMenuItem>
                <SidebarMenuButton
                  onClick={onLogout}
                  className="w-full h-10 text-slate-600 hover:text-red-600 hover:bg-red-50 transition-all duration-200 rounded-xl border border-slate-200 hover:border-red-200"
                  id="header-logout-button"
                >
                  <LogOut className="w-4 h-4" />
                  <span className="font-medium">Cerrar Sesi√≥n</span>
                </SidebarMenuButton>
              </SidebarMenuItem>
            </SidebarMenu>
          </SidebarFooter>
        </Sidebar>

        <SidebarInset className="flex-1">
          {/* Header */}
          <header className="relative overflow-hidden border-b border-slate-200/50 bg-white backdrop-blur-xl px-6 py-3 shadow-sm">
            {/* Subtle background pattern */}
            <div className="absolute inset-0 bg-gradient-to-r from-blue-50/40 via-white to-purple-50/30"></div>
            <div className="absolute top-0 left-0 w-full h-0.5 bg-gradient-to-r from-blue-500 via-purple-500 to-blue-600"></div>

            <div className="relative flex items-center justify-between">
              <div className="flex items-center gap-4">
                <div className="group p-2 hover:bg-slate-100/60 rounded-xl transition-all duration-300">
                  <SidebarTrigger className="text-slate-700 hover:text-slate-900 transition-colors duration-200" />
                </div>

                <div className="flex items-center gap-3">
                  {/* Compact title section */}
                  <div>
                    <h1 className="text-lg font-bold text-slate-900 tracking-tight leading-tight">{getViewTitle()}</h1>
                    <p className="text-xs text-slate-600 font-medium">
                      {currentView === 'dashboard' ? `Bienvenido, ${socio.nombres}` : `Portal APR - ${socio.nombres}`}
                    </p>
                  </div>
                </div>
              </div>

              <div className="flex items-center gap-2">
                <NotificationBell />

                <button
                  id="header-tutorial-button"
                  onClick={() => startSidebarTutorial(socio.nombres)}
                  className="p-1.5 text-slate-600 hover:text-slate-900 hover:bg-slate-100 rounded-lg transition-colors duration-200"
                  title="Tutorial"
                >
                  <BookOpen className="w-4 h-4" />
                </button>

                <Badge
                  variant={totalDeuda > 0 ? "destructive" : "secondary"}
                  className={`shadow-sm font-medium text-xs ${
                    totalDeuda > 0
                      ? 'bg-red-50 text-red-700 border-red-200'
                      : 'bg-green-50 text-green-700 border-green-200'
                  }`}
                >
                  {totalDeuda === 0 ? 'Al d√≠a' : `Deuda: ${formatCurrency(totalDeuda)}`}
                </Badge>
              </div>
            </div>
          </header>

          {/* Main Content */}
          <main className="flex-1 min-h-screen overflow-hidden bg-gradient-to-br from-slate-50 to-slate-100/50">
            <div className="h-full">
              {renderContent()}
            </div>
          </main>
        </SidebarInset>
      </div>

      {/* AI Assistant Modal */}
      <AIAssistantModal
        isOpen={isAssistantModalOpen}
        onClose={() => setIsAssistantModalOpen(false)}
        initialConversationId={initialConversationId}
      />

      {/* Tutorial Modal */}
      <TutorialSocio
        isOpen={isTutorialOpen}
        onClose={handleCloseTutorial}
        currentLocation={getCurrentLocationText()}
        userName={`${socio.nombres} ${socio.apellidos}`}
        onNavigate={setCurrentView}
        onReopenTutorial={() => setIsTutorialOpen(true)}
      />

      {/* Sidebar Tutorial with Driver.js */}
      <SidebarTutorial userName={socio.nombres} />
    </SidebarProvider>
  );
}

// Funci√≥n separada para el contenido del dashboard
function DashboardContent({ socio, formatCurrency, deudaStatus, setCurrentView, totalDeuda, pendingBoletas, handleProceedToPay, proximoVencimiento }: any) {
  // Removed console.log to prevent loops

  try {
    return (
    <div className="p-4">
      {/* Resumen de Estado */}
      <div id="welcome-cards" className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              {/* Nuevo Card de Consumo */}
              <Card className="bg-background border-0 shadow-none cursor-pointer" onClick={() => setCurrentView('consumo')}>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Consumo del Mes</CardTitle>
                  <Droplets className="h-4 w-4 icon-theme-primary" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-theme-primary">
                    --
                  </div>
                  <p className="text-xs text-muted-foreground">
                    m¬≥ consumidos
                  </p>
                  <Button
                    size="sm"
                    variant="outline"
                    className="mt-2 w-full text-xs"
                    onClick={(e) => {
                      e.stopPropagation();
                      setCurrentView('consumo');
                    }}
                  >
                    Ver Detalles
                  </Button>
                </CardContent>
              </Card>

              <Card className="bg-background border-0 shadow-none">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Pr√≥ximo Vencimiento</CardTitle>
                  <Clock className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                    <CardContent>
                  <div className={`text-2xl font-bold ${proximoVencimiento?.color || 'text-gray-500'}`}>
                    {proximoVencimiento?.vencido && proximoVencimiento?.dias < 0 ? (
                      <span className="text-destructive">{Math.abs(proximoVencimiento.dias)} d√≠as</span>
                    ) : proximoVencimiento?.vencido && proximoVencimiento?.dias === 0 ? (
                      <span className="text-destructive">HOY</span>
                    ) : proximoVencimiento?.dias ? (
                      <span>{proximoVencimiento.dias} d√≠as</span>
                    ) : (
                      <span className="text-gray-500">--</span>
                    )}
                  </div>
                  <p className="text-xs text-muted-foreground">
                    {proximoVencimiento?.texto || 'Calculando...'}
                  </p>
                </CardContent>
              </Card>

              <Card className="bg-background border-0 shadow-none">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Deuda Total</CardTitle>
                  <AlertCircle className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-destructive">
                    {formatCurrency(totalDeuda)}
                  </div>
                  <div className="flex items-center gap-2 mt-1">
                    <div className={`w-2 h-2 rounded-full ${deudaStatus.color}`} />
                    <p className="text-xs text-muted-foreground">{deudaStatus.text}</p>
                  </div>
                  {totalDeuda > 0 && (
                    <Button 
                      size="sm" 
                      className="mt-2 button-theme-success"
                      onClick={() => handleProceedToPay(pendingBoletas.map((b: any) => b.id))}
                    >
                      <CreditCard className="w-4 h-4 mr-1" />
                      Pagar Todo
                    </Button>
                  )}
                </CardContent>
              </Card>

              <Card className="bg-background border-0 shadow-none">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Estado General</CardTitle>
                  {totalDeuda === 0 ? (
                    <CheckCircle className="h-4 w-4 status-dot-success" />
                  ) : (
                    <AlertCircle className="h-4 w-4 status-dot-warning" />
                  )}
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">
                    {totalDeuda === 0 ? (
                      <Badge variant="default" className="status-success border-0">
                        Al d√≠a
                      </Badge>
                    ) : (
                      <Badge variant="destructive">
                        Con deuda
                      </Badge>
                    )}
                  </div>
                  <p className="text-xs text-muted-foreground">
                    Estado de cuenta
                  </p>
                </CardContent>
              </Card>
            </div>

            {/* Acciones R√°pidas */}
            <Card className="bg-background border-0 shadow-none mb-8">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Receipt size={20} />
                  Acciones R√°pidas
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                  <Button
                    onClick={() => setCurrentView('consumo')}
                    className="h-20 flex flex-col items-center justify-center gap-2 status-info hover:opacity-80"
                    variant="outline"
                  >
                    <Droplets size={24} />
                    <span>Mi Consumo</span>
                  </Button>

                  <Button
                    onClick={() => setCurrentView('boletas')}
                    className="h-20 flex flex-col items-center justify-center gap-2"
                    variant="outline"
                  >
                    <FileText size={24} />
                    <span>Ver mis Boletas</span>
                  </Button>

                  <Button
                    onClick={() => setCurrentView('pago')}
                    className="h-20 flex flex-col items-center justify-center gap-2"
                    disabled={totalDeuda === 0}
                  >
                    <CreditCard size={24} />
                    <span>Pagar Deuda</span>
                    {totalDeuda > 0 && (
                      <span className="text-xs">{formatCurrency(totalDeuda)}</span>
                    )}
                  </Button>

                  <Button
                    onClick={() => setCurrentView('historial')}
                    className="h-20 flex flex-col items-center justify-center gap-2"
                    variant="outline"
                  >
                    <History size={24} />
                    <span>Historial de Pagos</span>
                  </Button>

                  <Button
                    onClick={() => setCurrentView('chat')}
                    className="h-20 flex flex-col items-center justify-center gap-2"
                    variant="outline"
                  >
                    <MessageCircle size={24} />
                    <span>Chat de Soporte</span>
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Informaci√≥n Adicional */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card className="bg-background border-0 shadow-none">
                <CardHeader>
                  <CardTitle>Informaci√≥n de Contacto</CardTitle>
                </CardHeader>
                <CardContent className="space-y-2">
                  <div>
                    <p className="text-sm text-theme-muted">Email</p>
                    <p className="font-medium">{socio.email}</p>
                  </div>
                  {socio.telefono && (
                    <div>
                      <p className="text-sm text-theme-muted">Tel√©fono</p>
                      <p className="font-medium">{socio.telefono}</p>
                    </div>
                  )}
                  {socio.direccion && (
                    <div>
                      <p className="text-sm text-theme-muted">Direcci√≥n</p>
                      <p className="font-medium">{socio.direccion}</p>
                    </div>
                  )}
                </CardContent>
              </Card>

              <Card className="bg-background border-0 shadow-none">
                <CardHeader>
                  <CardTitle>Informaci√≥n de Cuenta</CardTitle>
                </CardHeader>
                <CardContent className="space-y-2">
                  <div>
                    <p className="text-sm text-theme-muted">RUT</p>
                    <p className="font-medium">{socio.rut}</p>
                  </div>
                  <div>
                    <p className="text-sm text-theme-muted">Fecha de Ingreso</p>
                    <p className="font-medium">
                      {new Date(socio.fechaIngreso).toLocaleDateString('es-CL')}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-theme-muted">Estado</p>
                    <Badge variant={socio.activo ? "default" : "secondary"}>
                      {socio.activo ? 'Activo' : 'Inactivo'}
                    </Badge>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Alerta de Deuda */}
            {totalDeuda > 0 && (
              <Card className="bg-background border-0 shadow-none mt-6 status-warning border-0">
                <CardContent className="pt-6">
                  <div className="flex items-start gap-3">
                    <AlertCircle className="status-dot-warning mt-0.5" size={20} />
                    <div>
                      <h3 className="font-semibold text-current">
                        Tienes deuda pendiente
                      </h3>
                      <p className="text-sm text-current opacity-90 mt-1">
                        Tu deuda actual es de <strong>{formatCurrency(totalDeuda)}</strong>.
                        Te recomendamos realizar el pago lo antes posible para evitar recargos.
                      </p>
                      <Button
                        onClick={() => setCurrentView('pago')}
                        className="mt-3"
                        size="sm"
                      >
                        Pagar Ahora
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
        </div>
      );
  } catch (error) {
    console.error('‚ùå Error in DashboardContent:', error);
    return (
      <div className="p-6">
        <div className="status-error rounded-lg p-4">
          <h3 className="text-current font-medium">Error al cargar el dashboard</h3>
          <p className="text-current opacity-90 text-sm mt-1">
            Ha ocurrido un error. Por favor, recarga la p√°gina.
          </p>
        </div>
      </div>
    );
  }
}